{
	// Place your snippets for vue here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"html:template": {
		"prefix": "html:template",
		"body": "<template>$0</template>"
	},
	"script:js": {
		"prefix": "script:js",
		"body": [
			"<script>",
			"export default {",
			"\t$0",
			"}",
			"</script>"
		]
	},
	"script:js-with-name": {
		"prefix": "script:js-with-name",
		"body": [
			"<script>",
			"export default {",
			"\tname: '${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}'",
			"\t$0",
			"}",
			"</script>"
		]
	},
	"style:scss": {
		"prefix": "style:scss",
		"body": [
			"<style lang=\"scss\">",
			"$0",
			"</style>",
		]
	},
	"style:scss-scoped": {
		"prefix": "style:scss-scoped",
		"body": [
			"<style lang=\"scss\" scoped>",
			"$0",
			"</style>",
		]
	},
	"vue:scss-scoped": {
		"prefix": "vue:scss-scoped",
		"body": [
			"<template>",
			"\t<div class=\"${TM_FILENAME_BASE}\">$0</div>",
			"</template>",
			"",
			"<script>",
			"export default {",
			"\tname: '${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}',",
			"}",
			"</script>",
			"",
			"<style lang=\"scss\" scoped></style>"
		],
	},
	"vue:scss-scoped-custom": {
		"prefix": "vue:scss-scoped-custom",
		"body": [
			"<template>",
			"\t<div class=\"${1:${TM_FILENAME_BASE}}\">$0</div>",
			"</template>",
			"",
			"<script>",
			"export default {",
			"\tname: '${2:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}}',",
			"}",
			"</script>",
			"",
			"<style lang=\"scss\" scoped></style>"
		],
	},
	"options:asyncData": {
		"prefix": "options:asyncData",
		"body": [
			"async asyncData() {",
			"$0",
			"},"
		]
	}
}